@startuml
title AsteroidsFX - Class Diagram
skinparam linetype ortho
hide empty members

component Common  {
}

package Common.data  {
    class Entity {
        - UUID id
        - double[] polygonCoordinates
        - double width
        - double height
        - double x
        - double y
        - double dx
        - double dy
        - double rotation
        - int health
        - Type type

    + getID() : String
    + getPolygonCoordinates() : double[]
    + setX(double x) : void
    + getX() : double
    + setY(double y) : void
    + getY() : double
    + setRotation(double rotation) : void
    + getRotation() : double
    + getDX() : double
    + setDX(double dx) : void
    + getDY() : double
    + setDY(double dy) : void
    + getWidth() : double
    + setWidth(double width) : void
    + getHeight() : double
    + setHeight(double height) : void
    + getHealth() : int
    + setHealth(int health) : void
    + getType() : Type
    }

    enum Type {
        PLAYER
        ENEMY
        BULLET
        ASTEROID
        DEBRIS
    }

    class Event {
        - Entity entityA
        - Entity entityB
        - EventType eventType
        - World world
        - GameData gameData

        + getEntityA() : Entity
        + getEntityB() : Entity
        + getEventType() : EventType
        + getWorld() : World
        + getGameData() : GameData
    }

    enum EventType {
        COLLISION
        SCORE_INCREMENT
        NEW_LEVEL
        GAME_OVER
    }

    class EventBroker {
        - {static} EventBroker instance
        - Map<EventType, List<IObserver>> observers

        + {static} getInstance() : EventBroker
        + addObserver(List<EventType> topics, IObserver observer) : void
        + publish(Event event) : void
    }

    class GameData {
        - int displayWidth
        - int displayHeight
        - GameKeys keys
        - Entity player

        + getKeys() : GameKeys
        + setDisplayWidth(int width) : void
        + getDisplayWidth() : int
        + setDisplayHeight(int height) : void
        + getDisplayHeight() : int
        + setPlayer(Entity player) : void
        + getPlayer() : Entity
    }



    class GameKeys {
        - {static} boolean[] keys
        - {static} boolean[] pkeys
        - {static} int NUM_KEYS
        + {static} int UP
        + {static} int LEFT
        + {static} int RIGHT
        + {static} int SPACE

        + update() : void
        + setKey(int, boolean) : void
        + isDown(int) : boolean
        + isPressed(int) : boolean
    }

    class World {
        - Map<String, Entity> entityMap

        + addEntity(Entity) : String
        + removeEntity(String entityID) : void
        + removeEntity(Entity entity) : void
        + getEntities() : Collection<Entity>
        + getEntities(Class<E>... entityTypes) : <E extends Entity> List<Entity>
        + getEntity(String ID) : Entity
    }

    Entity *-- Type: "has a "
    Event *-- EventType: "has a "
    GameData *-- GameKeys: "contains "
}

package Common.services {
    interface IEntityProcessingService {
        process(GameData gameData, World world) : void
    }

    interface IGamePluginService {
        start(GameData gameData, World world) : void
        stop(GameData gameData, World world) : void
    }

    interface IObserver {
        onEvent(Event event) : void
        getTopics() : List<EventType>
    }

    interface IPostEntityProcessingService {
        process(GameData gameData, World world) : void
    }

    interface IUIRenderingService {
        render(Pane gameWindow) : void
        update(Pane gameWindow, GameData gameData) : void
    }

     interface IEntityStylingService {
            styleEntity(Entity entity, Polygon polygon) : void
        }

}

@enduml