@startuml
title CollisionControlSystem (Collision Detected) - Sequence Diagram
participant Main
participant IPostEntityProcessingService
participant CollisionControlSystem
participant EventBroker
participant Observer

activate Main
Main -> IPostEntityProcessingService: process(GameData, World)
activate IPostEntityProcessingService
IPostEntityProcessingService -> CollisionControlSystem: process(GameData, World)
activate CollisionControlSystem
CollisionControlSystem -> CollisionControlSystem: checkCollision(Entity, Entity)
    note right of CollisionControlSystem: if the result is true, publish the collision event\nelse do nothing
alt checkCollision(Entity, Entity) is true
    CollisionControlSystem -> EventBroker: publish(EntityA, EntityB, EventType.COLLISION, World, GameData)
    activate EventBroker
    loop for each observer.get(EventType.COLLISION)
        EventBroker -> Observer: onEvent(Event)
        activate Observer
        Observer --> EventBroker: void
        deactivate Observer
    end
    EventBroker --> CollisionControlSystem: void
    deactivate EventBroker
end
CollisionControlSystem --> IPostEntityProcessingService: void
deactivate CollisionControlSystem
IPostEntityProcessingService --> Main: void
deactivate IPostEntityProcessingService
@enduml