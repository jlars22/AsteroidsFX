@startuml
title Collision Detection - Sequence Diagram
participant Main
participant IPostEntityProcessingService
participant CollisionControlSystem
participant EventBroker
participant Observer

activate Main
Main -> IPostEntityProcessingService: process(GameData, World)
activate IPostEntityProcessingService
IPostEntityProcessingService -> CollisionControlSystem: process(GameData, World)
activate CollisionControlSystem
loop for each entityA in world.getEntities()
    loop for each entityB in world.getEntities()
        CollisionControlSystem -> CollisionControlSystem: entityA.getID().equals(entityB.getID())
        alt entityA.getID().equals(entityB.getID()) is false
        note right of CollisionControlSystem: if the entities have same id, we have selected the same entity twice,\nso we skip the iteration
            CollisionControlSystem -> CollisionControlSystem: checkCollision(Entity, Entity)
            note right of CollisionControlSystem: if the result of checkCollision is true,\npublish the collision event, else do nothing
            alt checkCollision(Entity, Entity) is true
                CollisionControlSystem -> EventBroker: publish(EntityA, EntityB, EventType.COLLISION, World, GameData)
                activate EventBroker
                loop for each observer.get(EventType.COLLISION)
                    EventBroker -> Observer: onEvent(Event)
                    activate Observer
                    Observer --> EventBroker: void
                    deactivate Observer
                end
                EventBroker --> CollisionControlSystem: void
                deactivate EventBroker
            end
        end
    end
end
CollisionControlSystem --> IPostEntityProcessingService: void
deactivate CollisionControlSystem
IPostEntityProcessingService --> Main: void
deactivate IPostEntityProcessingService
@enduml